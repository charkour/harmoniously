import { ClassLimits, LooseObject } from "./interfaces";

// TODO: move this to tests once logic is mostly done.
export const math_stat_only_rooms = ["nh251", "nh259", "nh276", "nh261", "nh295"];
export const cs_only_rooms = ["sb372", "nh253", "sb010", "sb382", "hh336", "hh334", "sc203"];
// NOTE: it fails to find a solution when there are is not an extra room.
export const both = ["nh064", "a"];
export const cs_lab_rooms = ["sb337", "sb354"];
export const bio_rooms = ["sb256", "sb276", "cfaud", "hc300", "sb103"];
export const bio_lab_rooms = ["sb277", "dh132", "dh106", "dh124", "sb210"];

export const cs_rooms = [...cs_only_rooms, ...both];
export const math_stat_rooms = [...math_stat_only_rooms, ...both];

export const rooms = [
  ...math_stat_only_rooms,
  ...cs_only_rooms,
  ...both,
  ...cs_lab_rooms,
  ...bio_rooms,
  ...bio_lab_rooms,
];

export const times = [
  "mwf800",
  "mwf900",
  "mwf1030",
  "mwf1130",
  "mwf1230",
  "mwf130",
  "mwf230",
  "tth830",
  "tth1030",
];

// TODO: make professor field an array.
// TODO: add more fields to ClassLimits that are appropriate.
export const user_constraints: LooseObject<ClassLimits> = {
  cs100a: { professor: "meyer", rooms: cs_rooms },
  cs104a: { professor: "schuurman", rooms: cs_rooms },
  cs104b: { professor: "schuurman", rooms: cs_rooms },
  cs104c: { professor: "schuurman", rooms: cs_rooms },
  lcs104a: { professor: "sykes", rooms: cs_lab_rooms },
  lcs104b: { professor: "schuurman", rooms: cs_lab_rooms },
  lcs104c: { professor: "sykes", rooms: cs_lab_rooms },
  lcs104d: { professor: "schuurman", rooms: cs_lab_rooms },
  lcs104e: { professor: "sykes", rooms: cs_lab_rooms },
  cs106a: { professor: "norman", rooms: cs_rooms },
  lcs106a: { professor: "norman", rooms: cs_lab_rooms },
  cs108a: { professor: "vanderlinden", rooms: cs_rooms },
  cs108b: { professor: "arnold", rooms: cs_rooms },
  lcs108a: { professor: "wieringa", rooms: cs_lab_rooms },
  lcs108b: { professor: "arnold", rooms: cs_lab_rooms },
  cs112a: { professor: "adams", rooms: cs_rooms },
  cs112b: { professor: "adams", rooms: cs_rooms },
  lcs112a: { professor: "norman", rooms: cs_lab_rooms },
  lcs112b: { professor: "wieringa", rooms: cs_lab_rooms },
  cs195a: { professor: "norman", rooms: cs_rooms },
  cs212a: { professor: "plantinga", rooms: cs_rooms },
  cs212b: { professor: "plantinga", rooms: cs_rooms },
  cs214a: { professor: "adams", rooms: cs_rooms },
  cs214b: { professor: "adams", rooms: cs_rooms },
  lcs214a: { professor: "meyer", rooms: cs_lab_rooms },
  lcs214b: { professor: "meyer", rooms: cs_lab_rooms },
  cs232a: { professor: "norman", rooms: cs_rooms },
  cs232b: { professor: "norman", rooms: cs_rooms },
  cs262a: { professor: "vanderlinden", rooms: cs_rooms },
  cs262b: { professor: "vanderlinden", rooms: cs_rooms },
  lcs262a: { professor: "vanderlinden", rooms: cs_lab_rooms },
  lcs262b: { professor: "vanderlinden", rooms: cs_lab_rooms },
  cs295a: { professor: "norman", rooms: cs_rooms },
  cs300a: { professor: "schuurman", rooms: cs_rooms },
  lcs300a: { professor: "schuurman", rooms: cs_lab_rooms },
  cs332a: { professor: "norman", rooms: cs_rooms },
  cs336a: { professor: "norman", rooms: cs_rooms },
  cs342a: { professor: "bailey", rooms: cs_rooms },
  cs344a: { professor: "vanderlinden", rooms: cs_rooms },
  cs364a: { professor: "vedra", rooms: cs_rooms },
  cs374a: { professor: "adams", rooms: cs_rooms },
  cs383a: { professor: "bailey", rooms: cs_rooms },
  cs384a: { professor: "schuurman", rooms: cs_rooms },
  cs384b: { professor: "schuurman", rooms: cs_rooms },
  // # NOTE: skip cs390
  cs394: { professor: "bailey", rooms: cs_rooms },
  // # NOTE: skip cs 396/8 and CS-W60
  data101a: { professor: "bailey", rooms: cs_rooms },
  data101b: { professor: "bailey", rooms: cs_rooms },
  data175a: { professor: "brendavanderlinden", rooms: cs_rooms },
  data175b: { professor: "brendavanderlinden", rooms: cs_rooms },
  data175c: { professor: "momeyer", rooms: cs_rooms },
  data202a: { professor: "arnold", rooms: cs_rooms },
  data303: { professor: "arnold", rooms: cs_rooms },
  data383: { professor: "bailey", rooms: cs_rooms },
  idis110a: { professor: "bobeldyk", rooms: cs_rooms },
  math100a: { professor: "turner", rooms: math_stat_rooms },
  math132a: { professor: "bolt", rooms: math_stat_rooms },
  math169a: { professor: "ferdinands", rooms: math_stat_rooms },
  math170a: { professor: "ferdinands", rooms: math_stat_rooms },
  math171a: { professor: "bolt", rooms: math_stat_rooms },
  math171b: { professor: "bolt", rooms: math_stat_rooms },
  math171c: { professor: "moseley", rooms: math_stat_rooms },
  math171d: { professor: "moseley", rooms: math_stat_rooms },
  math172a: { professor: "sunukjian", rooms: math_stat_rooms },
  math172b: { professor: "scofield", rooms: math_stat_rooms },
  math172c: { professor: "kapitula", rooms: math_stat_rooms },
  math190a: { professor: "scofield", rooms: math_stat_rooms },
  math221a: { professor: "klanderman", rooms: math_stat_rooms },
  math222a: { professor: "talsma", rooms: math_stat_rooms },
  math231a: { professor: "scofield", rooms: math_stat_rooms },
  math231b: { professor: "kapitula", rooms: math_stat_rooms },
  math231c: { professor: "scofield", rooms: math_stat_rooms },
  math251a: { professor: "scofield", rooms: math_stat_rooms },
  math251b: { professor: "scofield", rooms: math_stat_rooms },
  math252a: { professor: "pruim", rooms: math_stat_rooms },
  math252b: { professor: "pruim", rooms: math_stat_rooms },
  math255a: { professor: "moseley", rooms: math_stat_rooms },
  math270a: { professor: "ferdinands", rooms: math_stat_rooms },
  math271a: { professor: "ferdinands", rooms: math_stat_rooms },
  math270b: { professor: "bolt", rooms: math_stat_rooms },
  math271b: { professor: "bolt", rooms: math_stat_rooms },
  math270c: { professor: "kapitula", rooms: math_stat_rooms },
  math271c: { professor: "kapitula", rooms: math_stat_rooms },
  math301a: { professor: "turner", rooms: math_stat_rooms },
  math305a: { professor: "moseley", rooms: math_stat_rooms },
  math323a: { professor: "genzink", rooms: math_stat_rooms },
  math327a: { professor: "klanderman", rooms: math_stat_rooms },
  math331a: { professor: "kapitula", rooms: math_stat_rooms },
  math351a: { professor: "ferdinands", rooms: math_stat_rooms },
  math355a: { professor: "kapitula", rooms: math_stat_rooms },
  math359a: { professor: "klanderman", rooms: math_stat_rooms },
  math361a: { professor: "ferdinands", rooms: math_stat_rooms },
  math390a: { professor: "moseley", rooms: math_stat_rooms },
  math391a: { professor: "moseley", rooms: math_stat_rooms },
  math395a: { professor: "klanderman", rooms: math_stat_rooms },
  mathw81a: { professor: "moseley", rooms: math_stat_rooms },
  mathw82a: { professor: "pruim", rooms: math_stat_rooms },
  stat143a: { professor: "pamplantinga", rooms: math_stat_rooms },
  stat143b: { professor: "pamplantinga", rooms: math_stat_rooms },
  stat143c: { professor: "barbaraadams", rooms: math_stat_rooms },
  stat143d: { professor: "barbaraadams", rooms: math_stat_rooms },
  stat143e: { professor: "talsma", rooms: math_stat_rooms },
  stat145a: { professor: "scofield", rooms: math_stat_rooms },
  stat241a: { professor: "jager", rooms: math_stat_rooms },
  stat241b: { professor: "jager", rooms: math_stat_rooms },
  stat241c: { professor: "jager", rooms: math_stat_rooms },
  stat243a: { professor: "deruiter", rooms: math_stat_rooms },
  stat245a: { professor: "deruiter", rooms: math_stat_rooms },
  stat343a: { professor: "pruim", rooms: math_stat_rooms },
  stat344a: { professor: "deruiter", rooms: math_stat_rooms },
  stat390a: { professor: "pruim", rooms: math_stat_rooms },
  // // # TODO: add engineering classes and cognates
  // bio115a: "miller",
  // bio123a: "miller",
  // bio141a: "shen",
  // bio141b: "shen",
  // lbio141a: "shen",
  // lbio141b: "grasman",
  // lbio141c: "grasman",
  // lbio141d: "shen",
  // bio160a: "grasman",
  // bio160n: "wertz",
  // lbio160a: "grasman",
  // lbio160b: "dejong",
  // lbio160c: "dejong",
  // lbio160n: "wertz",
  // bio161a: "koetje",
  // lbio161a: "miller",
  // lbio161b: "miller",
  // bio205a: "bebej",
  // lbio205a: "bebej",
  // lbio205b: "bebej",
  // lbio205c: "bebej",
  // lbio205d: "bebej",
  // lbio205e: "barrett",
  // bio206a: "dubois",
  // bio206b: "barret",
  // lbio206a: "dubois",
  // lbio206b: "barret",
  // lbio206c: "dubois",
  // lbio206d: "boldenow",
  // bio207a: "wertz",
  // bio207b: "wertz",
  // lbio207a: "wertz",
  // lbio207b: "wertz",
  // lbio207c: "wertz",
  // lbio207d: "shen",
  // lbio207e: "shen",
  // lbio207f: "shen",
  // lbio207g: "keen",
  // lbio207h: "keen",
  // lbio207i: "keen",
  // bio230a: "dornbos",
  // lbio230a: "koetje",
  // lbio230b: "barrett",
  // lbio230c: "koetje",
  // bio250a: "miller",
  // bio250b: "dejong",
  // bio295a: "koetje",
  // bio321a: "wilstermann",
  // lbio321a: "wiltermann",
  // lbio321b: "wiltermann",
  // bio331a: "boldenow",
  // lbio331a: "boldenow",
  // lbio331b: "boldenow",
  // bio332a: "dornbos",
  // lbio332a: "dornbos",
  // bio333a: "shen",
  // lbio333a: "shen",
  // bio335a: "barrett",
  // lbio335a: "boldenow",
  // bio336a: "wertz",
  // lbio336a: "wertz",
  // bio338a: "miller",
  // lbio338a: "miller",
  // bio345a: "grasman",
  // lbio345a: "grasman",
  // bio346a: "warners",
  // lbio346a: "warners",
  // bio354a: "dornbos",
  // bio364a: "koetje",
  // bio395a: "bebej",
  // bio396a: "dubois",
};
